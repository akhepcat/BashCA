#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

# This definition stops the following lines choking if HOME isn't
# defined.
HOME				= /etc/ssl/misc
RANDFILE			= $ENV::HOME/.rnd

# Extra OBJECT IDENTIFIER info:
#oid_file			= $ENV::HOME/.oid
#oid_section			= new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions		= 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

####################################################################
[ ca ]
default_ca			= CA_default		# The default ca section

####################################################################
[ CA_default ]

dir				= /etc/ssl/misc		# Where everything is kept
certs				= $dir/certs		# Where the issued certs are kept
crl_dir				= $dir/crl		# Where the issued crl are kept
database			= $dir/db/index.txt	# database index file.
#unique_subject			= no			# Set to 'no' to allow creation of
					# several ctificates with same subject.
new_certs_dir			= $dir/certs		# default place for new certs.

certificate			= $dir/certs/snakeoil.lo-CAcert.pem 	# The CA certificate
private_key			= $dir/private/snakeoil.lo-CAcert-key.pem # The private key

database			= $dir/db/certindex.txt	# CA database
serial				= $dir/db/serial 		# The current serial number
crlnumber			= $dir/crl/crlnumber	# the current crl number
					# must be commented out to leave a V1 CRL
crl				= $dir/crl/crl.pem 		# The current CRL
RANDFILE			= $dir/private/.rand	# private random number file

x509_extensions			= usr_cert		# The extentions to add to the cert

# Comment out the following two lines for the "traditional"
# (and highly broken) format.
name_opt 			= ca_default		# Subject Name options
cert_opt 			= ca_default		# Certificate field options


email_in_dn			= no


# Extension copying option: use with caution.
copy_extensions 		= copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
crl_extensions			= crl_ext

default_days			= 365			# how long to certify for
default_crl_days		= 30			# how long before next CRL
preserve			= no			# keep passed DN ordering
default_bits			= 4096
default_md			= sha512

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy				= policy_match

# For the CA policy
[ policy_match ]
countryName			= match
stateOrProvinceName		= match
organizationName		= match
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional
subjectAltName			= optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName			= optional
stateOrProvinceName		= optional
localityName			= optional
organizationName		= optional
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional
subjectAltName			= optional

####################################################################
[ req ]
default_bits			= 4096
default_md			= sha512
default_keyfile 		= privkey.pem
distinguished_name		= req_distinguished_name
attributes			= req_attributes
x509_extensions			= v3_ca	# The extentions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password 		= secret
# output_password		= secret

# This sets a mask for permitted string types. There are several options. 
# default: PrintableString, T61String, BMPString.
# pkix	 : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask 			= utf8only

req_extensions 			= v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= US
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= Alaska

localityName			= Locality Name (eg, city)
localityName_default		= Anchorage

0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= snakeoil.lo

# we can do this but it is not needed normally :-)
#1.organizationName		= Second Organization Name (eg, company)
#1.organizationName_default	= 

organizationalUnitName		= Organizational Unit Name (eg, section)
#organizationalUnitName_default	= 

commonName			= Common Name (e.g. server FQDN or YOUR name)
commonName_max			= 64

emailAddress			= Email Address
emailAddress_default		= postmaster@snakeoil.lo
emailAddress_max		= 64

# SET-ex3			= SET extension number 3

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20

unstructuredName		= An optional company name

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

keyUsage			= nonRepudiation, keyEncipherment, dataEncipherment, digitalSignature
basicConstraints		= critical,CA:FALSE
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid,issuer
issuerAltName 			= issuer:copy
crlDistributionPoints		= URI:https://www.snakeoil.lo/ca/crl.pem
# This will be displayed in Netscape's comment listbox.
#nsComment			= "OpenSSL Generated Certificate"

[ crl_ext ]
authorityKeyIdentifier		= keyid:always,issuer:always

[ v3_ca ]
basicConstraints		= critical,CA:TRUE
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always,issuer:always
keyUsage			= cRLSign, keyCertSign, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement

[ v3_ca_req ]
basicConstraints                = critical,CA:TRUE
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always,issuer:always
keyUsage                        = cRLSign, keyCertSign, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement
 
[ v3_req ]
keyUsage			= nonRepudiation, keyEncipherment, dataEncipherment, digitalSignature
extendedKeyUsage		= serverAuth, clientAuth, emailProtection
basicConstraints		= critical,CA:FALSE
subjectKeyIdentifier		= hash


# keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign, encipherOnly and decipherOnly
# extendedKeyUsage = serverAuth, clientAuth, codeSigning, emailProtection, timeStamping, msCodeInd, msCodeCom, msCTLSign, msSGC, msEFS, nsSGC
# nscert = client, server, email, objsign, reserved, sslCA, emailCA, objCA
